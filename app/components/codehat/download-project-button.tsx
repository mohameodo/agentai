"use client"

import JSZip from 'jszip'
import { saveAs } from 'file-saver'
import { useCodeHatStore } from '@/lib/codehat-store/store'
import { Button } from '@/components/ui/button'
import { Download, Loader2 } from 'lucide-react'
import { useState } from 'react'
import { toast } from '@/components/ui/toast'

export function DownloadProjectButton() {
  const { files, currentProject } = useCodeHatStore()
  const [isDownloading, setIsDownloading] = useState(false)

  const downloadProject = async () => {
    if (files.length === 0) {
      toast({
        title: "No files to download",
        description: "Generate some code first!",
        status: "info"
      })
      return
    }

    setIsDownloading(true)
    
    try {
      const zip = new JSZip()
      
      // Add all files to zip
      files.forEach(file => {
        zip.file(file.name, file.content)
      })
      
      // Add package.json if it doesn't exist
      const hasPackageJson = files.some(f => f.name === 'package.json')
      if (!hasPackageJson) {
        const packageJson = {
          name: currentProject?.title?.toLowerCase().replace(/\s+/g, '-') || 'codehat-project',
          version: '1.0.0',
          description: currentProject?.description || 'Generated by CodeHat',
          main: 'index.js',
          scripts: {
            start: 'node index.js',
            dev: 'node index.js'
          },
          keywords: ['codehat', 'ai-generated'],
          author: 'CodeHat AI'
        }
        zip.file('package.json', JSON.stringify(packageJson, null, 2))
      }
      
      // Generate and download zip
      const content = await zip.generateAsync({ type: 'blob' })
      const projectName = currentProject?.title || 'codehat-project'
      saveAs(content, `${projectName.toLowerCase().replace(/\s+/g, '-')}.zip`)
      
      toast({
        title: "Project downloaded! ðŸŽ‰",
        description: `${files.length} files packaged successfully`,
        status: "success"
      })
    } catch (error) {
      console.error('Download error:', error)
      toast({
        title: "Download failed",
        description: "There was an error creating the project zip",
        status: "error"
      })
    } finally {
      setIsDownloading(false)
    }
  }

  return (
    <Button
      onClick={downloadProject}
      variant="outline"
      size="sm"
      disabled={isDownloading || files.length === 0}
      className="gap-2"
    >
      {isDownloading ? (
        <Loader2 className="h-4 w-4 animate-spin" />
      ) : (
        <Download className="h-4 w-4" />
      )}
      {isDownloading ? 'Downloading...' : 'Download ZIP'}
    </Button>
  )
}
